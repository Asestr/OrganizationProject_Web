// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OrganizationAccsessLayer.Concrete;

#nullable disable

namespace OrganizationAccsessLayer.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20220903212518_newdatabase")]
    partial class newdatabase
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("OrganizationEntityLayer.Event.Admin", b =>
                {
                    b.Property<string>("AdminName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminName");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.Category", b =>
                {
                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoryName");

                    b.ToTable("Categorys");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.City", b =>
                {
                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CityName");

                    b.ToTable("Citys");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.Company", b =>
                {
                    b.Property<string>("OrganizerName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OrganizerLoginControl")
                        .HasColumnType("bit");

                    b.Property<string>("OrganizerMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizerPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizerPasswordRepeat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizerName");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.CompanyEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizerName")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EventId", "CompanyName");

                    b.HasIndex("OrganizerName");

                    b.ToTable("CompanyEvent");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"), 1L, 1);

                    b.Property<string>("Admin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminsAdminName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategorysCategoryName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CitysCityName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EventAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventExplanation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventQuota")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventRecourseOverTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EventStartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("EventTickedOrNotTicked")
                        .HasColumnType("bit");

                    b.HasKey("EventId");

                    b.HasIndex("AdminsAdminName");

                    b.HasIndex("CategorysCategoryName");

                    b.HasIndex("CitysCityName");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.OrganEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("OrganizerMail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EventId", "OrganizerMail");

                    b.HasIndex("OrganizerMail");

                    b.ToTable("OrganEvents");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.Organizer", b =>
                {
                    b.Property<string>("OrganizerMail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizerLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("OrganizerLoginControl")
                        .HasColumnType("bit");

                    b.Property<string>("OrganizerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizerPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizerPasswordRepeat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("OrganizerMail");

                    b.ToTable("Organizers");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.SubconEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("SubcontractorMail")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("EventId", "SubcontractorMail");

                    b.HasIndex("SubcontractorMail");

                    b.ToTable("SubconEvents");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.Subcontractor", b =>
                {
                    b.Property<string>("SubcontractorMail")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("SubcontractorLastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SubcontractorLoginControl")
                        .HasColumnType("bit");

                    b.Property<string>("SubcontractorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubcontractorPassword")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubcontractorPasswordRepeat")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SubcontractorMail");

                    b.ToTable("Subcontractors");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.CompanyEvent", b =>
                {
                    b.HasOne("OrganizationEntityLayer.Event.Event", "Event")
                        .WithMany("CompanyEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganizationEntityLayer.Event.Company", "Organizer")
                        .WithMany("CompanyEvents")
                        .HasForeignKey("OrganizerName");

                    b.Navigation("Event");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.Event", b =>
                {
                    b.HasOne("OrganizationEntityLayer.Event.Admin", "Admins")
                        .WithMany("Events")
                        .HasForeignKey("AdminsAdminName");

                    b.HasOne("OrganizationEntityLayer.Event.Category", "Categorys")
                        .WithMany("Events")
                        .HasForeignKey("CategorysCategoryName");

                    b.HasOne("OrganizationEntityLayer.Event.City", "Citys")
                        .WithMany("Events")
                        .HasForeignKey("CitysCityName");

                    b.Navigation("Admins");

                    b.Navigation("Categorys");

                    b.Navigation("Citys");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.OrganEvent", b =>
                {
                    b.HasOne("OrganizationEntityLayer.Event.Event", "Event")
                        .WithMany("OrganEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganizationEntityLayer.Event.Organizer", "Organizer")
                        .WithMany("OrganEvents")
                        .HasForeignKey("OrganizerMail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.SubconEvent", b =>
                {
                    b.HasOne("OrganizationEntityLayer.Event.Event", "Event")
                        .WithMany("SubconEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrganizationEntityLayer.Event.Subcontractor", "Subcontractor")
                        .WithMany("SubconEvents")
                        .HasForeignKey("SubcontractorMail")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Subcontractor");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.Admin", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.Category", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.City", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.Company", b =>
                {
                    b.Navigation("CompanyEvents");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.Event", b =>
                {
                    b.Navigation("CompanyEvents");

                    b.Navigation("OrganEvents");

                    b.Navigation("SubconEvents");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.Organizer", b =>
                {
                    b.Navigation("OrganEvents");
                });

            modelBuilder.Entity("OrganizationEntityLayer.Event.Subcontractor", b =>
                {
                    b.Navigation("SubconEvents");
                });
#pragma warning restore 612, 618
        }
    }
}
